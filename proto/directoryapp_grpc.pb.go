// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package directoryapp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkServiceClient is the client API for WorkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkServiceClient interface {
	CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*CreateClientResponse, error)
	CreateWorker(ctx context.Context, in *CreateWorkerRequest, opts ...grpc.CallOption) (*CreateWorkerResponse, error)
	CreateWorkRequest(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	ApplytoWork(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*ApplyResponse, error)
	UpdateTasktoDone(ctx context.Context, in *UpdatetoDoneRequest, opts ...grpc.CallOption) (*UpdatetoDoneResponse, error)
}

type workServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkServiceClient(cc grpc.ClientConnInterface) WorkServiceClient {
	return &workServiceClient{cc}
}

func (c *workServiceClient) CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*CreateClientResponse, error) {
	out := new(CreateClientResponse)
	err := c.cc.Invoke(ctx, "/directoryapp.WorkService/CreateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workServiceClient) CreateWorker(ctx context.Context, in *CreateWorkerRequest, opts ...grpc.CallOption) (*CreateWorkerResponse, error) {
	out := new(CreateWorkerResponse)
	err := c.cc.Invoke(ctx, "/directoryapp.WorkService/CreateWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workServiceClient) CreateWorkRequest(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, "/directoryapp.WorkService/CreateWorkRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workServiceClient) ApplytoWork(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*ApplyResponse, error) {
	out := new(ApplyResponse)
	err := c.cc.Invoke(ctx, "/directoryapp.WorkService/ApplytoWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workServiceClient) UpdateTasktoDone(ctx context.Context, in *UpdatetoDoneRequest, opts ...grpc.CallOption) (*UpdatetoDoneResponse, error) {
	out := new(UpdatetoDoneResponse)
	err := c.cc.Invoke(ctx, "/directoryapp.WorkService/UpdateTasktoDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkServiceServer is the server API for WorkService service.
// All implementations must embed UnimplementedWorkServiceServer
// for forward compatibility
type WorkServiceServer interface {
	CreateClient(context.Context, *CreateClientRequest) (*CreateClientResponse, error)
	CreateWorker(context.Context, *CreateWorkerRequest) (*CreateWorkerResponse, error)
	CreateWorkRequest(context.Context, *TaskRequest) (*TaskResponse, error)
	ApplytoWork(context.Context, *ApplyRequest) (*ApplyResponse, error)
	UpdateTasktoDone(context.Context, *UpdatetoDoneRequest) (*UpdatetoDoneResponse, error)
	mustEmbedUnimplementedWorkServiceServer()
}

// UnimplementedWorkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkServiceServer struct {
}

func (UnimplementedWorkServiceServer) CreateClient(context.Context, *CreateClientRequest) (*CreateClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (UnimplementedWorkServiceServer) CreateWorker(context.Context, *CreateWorkerRequest) (*CreateWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorker not implemented")
}
func (UnimplementedWorkServiceServer) CreateWorkRequest(context.Context, *TaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkRequest not implemented")
}
func (UnimplementedWorkServiceServer) ApplytoWork(context.Context, *ApplyRequest) (*ApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplytoWork not implemented")
}
func (UnimplementedWorkServiceServer) UpdateTasktoDone(context.Context, *UpdatetoDoneRequest) (*UpdatetoDoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTasktoDone not implemented")
}
func (UnimplementedWorkServiceServer) mustEmbedUnimplementedWorkServiceServer() {}

// UnsafeWorkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkServiceServer will
// result in compilation errors.
type UnsafeWorkServiceServer interface {
	mustEmbedUnimplementedWorkServiceServer()
}

func RegisterWorkServiceServer(s grpc.ServiceRegistrar, srv WorkServiceServer) {
	s.RegisterService(&WorkService_ServiceDesc, srv)
}

func _WorkService_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directoryapp.WorkService/CreateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).CreateClient(ctx, req.(*CreateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkService_CreateWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).CreateWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directoryapp.WorkService/CreateWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).CreateWorker(ctx, req.(*CreateWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkService_CreateWorkRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).CreateWorkRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directoryapp.WorkService/CreateWorkRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).CreateWorkRequest(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkService_ApplytoWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).ApplytoWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directoryapp.WorkService/ApplytoWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).ApplytoWork(ctx, req.(*ApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkService_UpdateTasktoDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatetoDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).UpdateTasktoDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directoryapp.WorkService/UpdateTasktoDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).UpdateTasktoDone(ctx, req.(*UpdatetoDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkService_ServiceDesc is the grpc.ServiceDesc for WorkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "directoryapp.WorkService",
	HandlerType: (*WorkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClient",
			Handler:    _WorkService_CreateClient_Handler,
		},
		{
			MethodName: "CreateWorker",
			Handler:    _WorkService_CreateWorker_Handler,
		},
		{
			MethodName: "CreateWorkRequest",
			Handler:    _WorkService_CreateWorkRequest_Handler,
		},
		{
			MethodName: "ApplytoWork",
			Handler:    _WorkService_ApplytoWork_Handler,
		},
		{
			MethodName: "UpdateTasktoDone",
			Handler:    _WorkService_UpdateTasktoDone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/directoryapp.proto",
}
